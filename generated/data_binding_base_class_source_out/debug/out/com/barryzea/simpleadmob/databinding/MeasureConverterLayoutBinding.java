// Generated by view binder compiler. Do not edit!
package com.barryzea.simpleadmob.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.NumberPicker;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.barryzea.simpleadmob.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MeasureConverterLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout bottomSheetMeasure;

  @NonNull
  public final MaterialButton btnConverter;

  @NonNull
  public final MaterialButton btnCopy;

  @NonNull
  public final MaterialButton btnShare;

  @NonNull
  public final ConstraintLayout ctlNumberPickerContent;

  @NonNull
  public final TextInputEditText edtInputValue;

  @NonNull
  public final TextInputEditText edtOutputValue;

  @NonNull
  public final NumberPicker npAngloMeasure;

  @NonNull
  public final NumberPicker npInternationalMeasure;

  @NonNull
  public final TextInputLayout tilInputValue;

  @NonNull
  public final TextInputLayout tilOutputValue;

  @NonNull
  public final TextView tvInputSymbol;

  @NonNull
  public final TextView tvOutputSymbol;

  @NonNull
  public final TextView tvScientificNTitle;

  @NonNull
  public final TextView tvScientificNValue;

  private MeasureConverterLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout bottomSheetMeasure, @NonNull MaterialButton btnConverter,
      @NonNull MaterialButton btnCopy, @NonNull MaterialButton btnShare,
      @NonNull ConstraintLayout ctlNumberPickerContent, @NonNull TextInputEditText edtInputValue,
      @NonNull TextInputEditText edtOutputValue, @NonNull NumberPicker npAngloMeasure,
      @NonNull NumberPicker npInternationalMeasure, @NonNull TextInputLayout tilInputValue,
      @NonNull TextInputLayout tilOutputValue, @NonNull TextView tvInputSymbol,
      @NonNull TextView tvOutputSymbol, @NonNull TextView tvScientificNTitle,
      @NonNull TextView tvScientificNValue) {
    this.rootView = rootView;
    this.bottomSheetMeasure = bottomSheetMeasure;
    this.btnConverter = btnConverter;
    this.btnCopy = btnCopy;
    this.btnShare = btnShare;
    this.ctlNumberPickerContent = ctlNumberPickerContent;
    this.edtInputValue = edtInputValue;
    this.edtOutputValue = edtOutputValue;
    this.npAngloMeasure = npAngloMeasure;
    this.npInternationalMeasure = npInternationalMeasure;
    this.tilInputValue = tilInputValue;
    this.tilOutputValue = tilOutputValue;
    this.tvInputSymbol = tvInputSymbol;
    this.tvOutputSymbol = tvOutputSymbol;
    this.tvScientificNTitle = tvScientificNTitle;
    this.tvScientificNValue = tvScientificNValue;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MeasureConverterLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MeasureConverterLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.measure_converter_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MeasureConverterLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout bottomSheetMeasure = (ConstraintLayout) rootView;

      id = R.id.btnConverter;
      MaterialButton btnConverter = ViewBindings.findChildViewById(rootView, id);
      if (btnConverter == null) {
        break missingId;
      }

      id = R.id.btnCopy;
      MaterialButton btnCopy = ViewBindings.findChildViewById(rootView, id);
      if (btnCopy == null) {
        break missingId;
      }

      id = R.id.btnShare;
      MaterialButton btnShare = ViewBindings.findChildViewById(rootView, id);
      if (btnShare == null) {
        break missingId;
      }

      id = R.id.ctlNumberPickerContent;
      ConstraintLayout ctlNumberPickerContent = ViewBindings.findChildViewById(rootView, id);
      if (ctlNumberPickerContent == null) {
        break missingId;
      }

      id = R.id.edtInputValue;
      TextInputEditText edtInputValue = ViewBindings.findChildViewById(rootView, id);
      if (edtInputValue == null) {
        break missingId;
      }

      id = R.id.edtOutputValue;
      TextInputEditText edtOutputValue = ViewBindings.findChildViewById(rootView, id);
      if (edtOutputValue == null) {
        break missingId;
      }

      id = R.id.npAngloMeasure;
      NumberPicker npAngloMeasure = ViewBindings.findChildViewById(rootView, id);
      if (npAngloMeasure == null) {
        break missingId;
      }

      id = R.id.npInternationalMeasure;
      NumberPicker npInternationalMeasure = ViewBindings.findChildViewById(rootView, id);
      if (npInternationalMeasure == null) {
        break missingId;
      }

      id = R.id.tilInputValue;
      TextInputLayout tilInputValue = ViewBindings.findChildViewById(rootView, id);
      if (tilInputValue == null) {
        break missingId;
      }

      id = R.id.tilOutputValue;
      TextInputLayout tilOutputValue = ViewBindings.findChildViewById(rootView, id);
      if (tilOutputValue == null) {
        break missingId;
      }

      id = R.id.tvInputSymbol;
      TextView tvInputSymbol = ViewBindings.findChildViewById(rootView, id);
      if (tvInputSymbol == null) {
        break missingId;
      }

      id = R.id.tvOutputSymbol;
      TextView tvOutputSymbol = ViewBindings.findChildViewById(rootView, id);
      if (tvOutputSymbol == null) {
        break missingId;
      }

      id = R.id.tvScientificNTitle;
      TextView tvScientificNTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvScientificNTitle == null) {
        break missingId;
      }

      id = R.id.tvScientificNValue;
      TextView tvScientificNValue = ViewBindings.findChildViewById(rootView, id);
      if (tvScientificNValue == null) {
        break missingId;
      }

      return new MeasureConverterLayoutBinding((ConstraintLayout) rootView, bottomSheetMeasure,
          btnConverter, btnCopy, btnShare, ctlNumberPickerContent, edtInputValue, edtOutputValue,
          npAngloMeasure, npInternationalMeasure, tilInputValue, tilOutputValue, tvInputSymbol,
          tvOutputSymbol, tvScientificNTitle, tvScientificNValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
